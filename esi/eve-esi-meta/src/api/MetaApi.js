/*
 * ESI Meta Spec
 * ESI specs and miscellaneous routes
 *
 * OpenAPI spec version: 0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.31
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GetStatusItem', 'model/GetVerifyOk'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GetStatusItem'), require('../model/GetVerifyOk'));
  } else {
    // Browser globals (root is window)
    if (!root.EsiMetaSpec) {
      root.EsiMetaSpec = {};
    }
    root.EsiMetaSpec.MetaApi = factory(root.EsiMetaSpec.ApiClient, root.EsiMetaSpec.GetStatusItem, root.EsiMetaSpec.GetVerifyOk);
  }
}(this, function(ApiClient, GetStatusItem, GetVerifyOk) {
  'use strict';

  /**
   * Meta service.
   * @module api/MetaApi
   * @version 0.1
   */

  /**
   * Constructs a new MetaApi. 
   * @alias module:api/MetaApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getHeaders operation.
     * @callback module:api/MetaApi~getHeadersCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': 'String'}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Debug request headers
     * Echo the request headers for debugging purposes. Note that the 'Connection' header and any 'X-' headers are not included
     * @param {module:api/MetaApi~getHeadersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {'String': 'String'}>}
     */
    this.getHeaders = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = {'String': 'String'};

      return this.apiClient.callApi(
        '/headers/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPing operation.
     * @callback module:api/MetaApi~getPingCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ping route
     * Ping the ESI routers
     * @param {module:api/MetaApi~getPingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.getPing = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain; charset=utf-8'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/ping', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatus operation.
     * @callback module:api/MetaApi~getStatusCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetStatusItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ESI health status
     * Provides a general health indicator per route and method
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.version The version of metrics to request. Note that alternate versions are grouped together (default to latest)
     * @param {module:api/MetaApi~getStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetStatusItem>}
     */
    this.getStatus = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'version': opts['version'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [GetStatusItem];

      return this.apiClient.callApi(
        '/status.json', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVerify operation.
     * @callback module:api/MetaApi~getVerifyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetVerifyOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify access token
     * Verify authorization tokens in ESI's auth cache
     * @param {Object} opts Optional parameters
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use if unable to set a header
     * @param {String} opts.authorization Access token, in the format of \"Bearer <access token>\"
     * @param {module:api/MetaApi~getVerifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetVerifyOk}
     */
    this.getVerify = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'user_agent': opts['userAgent'],
        'datasource': opts['datasource'],
        'token': opts['token'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent'],
        'Authorization': opts['authorization']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetVerifyOk;

      return this.apiClient.callApi(
        '/verify/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVersions operation.
     * @callback module:api/MetaApi~getVersionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List versions
     * List all endpoint versions
     * @param {Object} opts Optional parameters
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/MetaApi~getVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getVersions = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'user_agent': opts['userAgent'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/versions/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
