/*
 * ESI Meta Spec
 * ESI specs and miscellaneous routes
 *
 * OpenAPI spec version: 0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.31
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EsiMetaSpec);
  }
}(this, function(expect, EsiMetaSpec) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EsiMetaSpec.SwaggerApi();
  });

  describe('(package)', function() {
    describe('SwaggerApi', function() {
      describe('getDevSwagger', function() {
        it('should call getDevSwagger successfully', function(done) {
          // TODO: uncomment, update parameter values for getDevSwagger call and complete the assertions
          /*
          var opts = {};
          opts.userAgent = "userAgent_example";
          opts.xUserAgent = "xUserAgent_example";
          opts.datasource = "tranquility";

          instance.getDevSwagger(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDevSwagger_0', function() {
        it('should call getDevSwagger_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for getDevSwagger_0 call and complete the assertions
          /*
          var opts = {};
          opts.userAgent = "userAgent_example";
          opts.xUserAgent = "xUserAgent_example";
          opts.datasource = "tranquility";

          instance.getDevSwagger_0(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLatestSwagger', function() {
        it('should call getLatestSwagger successfully', function(done) {
          // TODO: uncomment, update parameter values for getLatestSwagger call and complete the assertions
          /*
          var opts = {};
          opts.userAgent = "userAgent_example";
          opts.xUserAgent = "xUserAgent_example";
          opts.datasource = "tranquility";

          instance.getLatestSwagger(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLatestSwagger_0', function() {
        it('should call getLatestSwagger_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for getLatestSwagger_0 call and complete the assertions
          /*
          var opts = {};
          opts.userAgent = "userAgent_example";
          opts.xUserAgent = "xUserAgent_example";
          opts.datasource = "tranquility";

          instance.getLatestSwagger_0(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLegacySwagger', function() {
        it('should call getLegacySwagger successfully', function(done) {
          // TODO: uncomment, update parameter values for getLegacySwagger call and complete the assertions
          /*
          var opts = {};
          opts.userAgent = "userAgent_example";
          opts.xUserAgent = "xUserAgent_example";
          opts.datasource = "tranquility";

          instance.getLegacySwagger(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLegacySwagger_0', function() {
        it('should call getLegacySwagger_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for getLegacySwagger_0 call and complete the assertions
          /*
          var opts = {};
          opts.userAgent = "userAgent_example";
          opts.xUserAgent = "xUserAgent_example";
          opts.datasource = "tranquility";

          instance.getLegacySwagger_0(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMetaSwagger', function() {
        it('should call getMetaSwagger successfully', function(done) {
          // TODO: uncomment, update parameter values for getMetaSwagger call and complete the assertions
          /*
          var opts = {};
          opts.userAgent = "userAgent_example";
          opts.xUserAgent = "xUserAgent_example";
          opts.datasource = "tranquility";

          instance.getMetaSwagger(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getV1Swagger', function() {
        it('should call getV1Swagger successfully', function(done) {
          // TODO: uncomment, update parameter values for getV1Swagger call and complete the assertions
          /*
          var opts = {};
          opts.userAgent = "userAgent_example";
          opts.xUserAgent = "xUserAgent_example";
          opts.datasource = "tranquility";

          instance.getV1Swagger(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getV2Swagger', function() {
        it('should call getV2Swagger successfully', function(done) {
          // TODO: uncomment, update parameter values for getV2Swagger call and complete the assertions
          /*
          var opts = {};
          opts.userAgent = "userAgent_example";
          opts.xUserAgent = "xUserAgent_example";
          opts.datasource = "tranquility";

          instance.getV2Swagger(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getV3Swagger', function() {
        it('should call getV3Swagger successfully', function(done) {
          // TODO: uncomment, update parameter values for getV3Swagger call and complete the assertions
          /*
          var opts = {};
          opts.userAgent = "userAgent_example";
          opts.xUserAgent = "xUserAgent_example";
          opts.datasource = "tranquility";

          instance.getV3Swagger(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getV4Swagger', function() {
        it('should call getV4Swagger successfully', function(done) {
          // TODO: uncomment, update parameter values for getV4Swagger call and complete the assertions
          /*
          var opts = {};
          opts.userAgent = "userAgent_example";
          opts.xUserAgent = "xUserAgent_example";
          opts.datasource = "tranquility";

          instance.getV4Swagger(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getV5Swagger', function() {
        it('should call getV5Swagger successfully', function(done) {
          // TODO: uncomment, update parameter values for getV5Swagger call and complete the assertions
          /*
          var opts = {};
          opts.userAgent = "userAgent_example";
          opts.xUserAgent = "xUserAgent_example";
          opts.datasource = "tranquility";

          instance.getV5Swagger(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getV6Swagger', function() {
        it('should call getV6Swagger successfully', function(done) {
          // TODO: uncomment, update parameter values for getV6Swagger call and complete the assertions
          /*
          var opts = {};
          opts.userAgent = "userAgent_example";
          opts.xUserAgent = "xUserAgent_example";
          opts.datasource = "tranquility";

          instance.getV6Swagger(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
