/*
 * ESI Meta Spec
 * ESI specs and miscellaneous routes
 *
 * OpenAPI spec version: 0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.31
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EsiMetaSpec);
  }
}(this, function(expect, EsiMetaSpec) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EsiMetaSpec.MetaApi();
  });

  describe('(package)', function() {
    describe('MetaApi', function() {
      describe('getHeaders', function() {
        it('should call getHeaders successfully', function(done) {
          // TODO: uncomment getHeaders call and complete the assertions
          /*

          instance.getHeaders(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a('string');
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPing', function() {
        it('should call getPing successfully', function(done) {
          // TODO: uncomment getPing call and complete the assertions
          /*

          instance.getPing(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getStatus', function() {
        it('should call getStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for getStatus call and complete the assertions
          /*
          var opts = {};
          opts.version = "latest";

          instance.getStatus(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EsiMetaSpec.GetStatusItem);
              expect(data.endpoint).to.be.a('string');
              expect(data.endpoint).to.be("");
              expect(data.method).to.be.a('string');
              expect(data.method).to.be("");
              expect(data.route).to.be.a('string');
              expect(data.route).to.be("");
              expect(data.status).to.be.a('string');
              expect(data.status).to.be("green");
              {
                let dataCtr = data.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getVerify', function() {
        it('should call getVerify successfully', function(done) {
          // TODO: uncomment, update parameter values for getVerify call and complete the assertions
          /*
          var opts = {};
          opts.userAgent = "userAgent_example";
          opts.xUserAgent = "xUserAgent_example";
          opts.datasource = "tranquility";
          opts.token = "token_example";
          opts.authorization = "authorization_example";

          instance.getVerify(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EsiMetaSpec.GetVerifyOk);
            expect(data.characterID).to.be.a('number');
            expect(data.characterID).to.be(0);
            expect(data.characterName).to.be.a('string');
            expect(data.characterName).to.be("");
            expect(data.characterOwnerHash).to.be.a('string');
            expect(data.characterOwnerHash).to.be("");
            expect(data.expiresOn).to.be.a('string');
            expect(data.expiresOn).to.be("");
            expect(data.intellectualProperty).to.be.a('string');
            expect(data.intellectualProperty).to.be("");
            expect(data.scopes).to.be.a('string');
            expect(data.scopes).to.be("");
            expect(data.tokenType).to.be.a('string');
            expect(data.tokenType).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getVersions', function() {
        it('should call getVersions successfully', function(done) {
          // TODO: uncomment, update parameter values for getVersions call and complete the assertions
          /*
          var opts = {};
          opts.userAgent = "userAgent_example";
          opts.xUserAgent = "xUserAgent_example";

          instance.getVersions(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a('string');
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
